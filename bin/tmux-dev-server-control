#!/usr/bin/env bash

[[ "${TRACE}" ]] && set -x
set -euo pipefail
shopt -s nullglob

# Default workspace roots - can be overridden by environment variable
DEV_WORKSPACE_ROOTS="${DEV_WORKSPACE_ROOTS:-$HOME/code}"

main() {
  check_dependencies

  if [[ $# -lt 1 ]]; then
    show_usage
    return 1
  fi

  local action="$1"
  shift

  case "$action" in
    start)
      handle_start "$@"
      ;;
    stop)
      handle_stop "$@"
      ;;
    logs)
      handle_logs "$@"
      ;;
    status)
      handle_status "$@"
      ;;
    monitor)
      handle_monitor "$@"
      ;;
    list)
      handle_list
      ;;
    *)
      echo "Error: Unknown action '$action'"
      show_usage
      return 1
      ;;
  esac
}

check_dependencies() {
  if ! command -v tmux >/dev/null 2>&1; then
    echo "Error: tmux is not installed"
    echo "Install with: brew install tmux (macOS) or apt-get install tmux (Ubuntu)"
    exit 1
  fi
}

show_usage() {
  echo "Usage: tmux-dev-server-control <action> [options]"
  echo ""
  echo "Actions:"
  echo "  start [-d <directory>] <command...> - Start a dev server in tmux session"
  echo "  stop <session-name>                - Stop a dev server session"
  echo "  logs <session-name> [lines]        - Show recent logs from session"
  echo "  status [session-name]              - Show status of sessions"
  echo "  monitor <session-name>             - Attach to session for monitoring"
  echo "  list                               - List all dev server sessions"
  echo ""
  echo "Session Naming: Auto-generated as 'foldername-command-slug'"
  echo "Workspace Roots: ${DEV_WORKSPACE_ROOTS}"
  echo ""
  echo "Examples:"
  echo "  tmux-dev-server-control start npm run dev                    # -> myproject-npm-run-dev"
  echo "  tmux-dev-server-control start -d ~/code/backend go run main  # -> backend-go-run-main"
  echo "  tmux-dev-server-control logs myproject-npm-run-dev 100"
  echo "  tmux-dev-server-control status"
}

generate_session_name() {
  local directory="$1"
  shift
  local command="$*"

  # Get the directory name
  local folder_name
  folder_name=$(basename "$directory")

  # Slugify the command: replace spaces and special chars with hyphens, lowercase
  local command_slug
  command_slug=$(echo "$command" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')

  # Truncate if too long (tmux has session name limits)
  if [[ ${#command_slug} -gt 30 ]]; then
    command_slug="${command_slug:0:30}"
  fi

  echo "${folder_name}-${command_slug}"
}

validate_session_name() {
  local session_name="$1"

  # Check format: foldername-command-slug (more flexible now)
  if [[ ! "$session_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "Error: Invalid session name format: '$session_name'"
    return 1
  fi

  return 0
}

validate_workspace() {
  local target_dir="${1:-$PWD}"
  local workspace_roots
  IFS=',' read -ra workspace_roots <<< "$DEV_WORKSPACE_ROOTS"

  # Expand tilde in target_dir
  target_dir="${target_dir/#\~/$HOME}"

  # Convert to absolute path
  target_dir=$(cd "$target_dir" 2>/dev/null && pwd) || {
    echo "Error: Directory '$1' does not exist"
    return 1
  }

  for root in "${workspace_roots[@]}"; do
    # Expand tilde
    root="${root/#\~/$HOME}"
    if [[ "$target_dir" == "$root"* ]]; then
      return 0
    fi
  done

  echo "Error: Target directory is outside workspace boundaries"
  echo "Target: $target_dir"
  echo "Allowed workspace roots: ${DEV_WORKSPACE_ROOTS}"
  echo "Use a directory within your workspace or update DEV_WORKSPACE_ROOTS"
  return 1
}

validate_git_repo() {
  local target_dir="${1:-$PWD}"

  # Check if target directory is in a git repo
  if ! (cd "$target_dir" && git rev-parse --git-dir >/dev/null 2>&1); then
    echo "Error: Target directory is not within a git repository"
    echo "Directory: $target_dir"
    echo "Dev server sessions must be run from within git repositories"
    return 1
  fi
  return 0
}


validate_command() {
  local target_dir="$1"
  shift
  local command="$*"

  # Simple allowlist of allowed command patterns
  local allowed_patterns=(
    # Node.js / Frontend
    "^npm (run|start)"
    "^yarn (dev|start|build)"
    "^pnpm (dev|start|build)"
    "^npx "
    "^node "

    # Go
    "^go run"
    "^go build"

    # Python
    "^python manage.py runserver"
    "^python -m "
    "^python main.py.*"
    "^python .*\.py"
    "^flask run"
    "^uvicorn "
    "^gunicorn "
    "^uv run "

    # Docker
    "^docker-compose up"
    "^compose up"
    "^docker run"

    # General dev tools
    "^make (dev|run|start)"
    "^./scripts/"
    "^bin/"
  )

  for pattern in "${allowed_patterns[@]}"; do
    if [[ "$command" =~ $pattern ]]; then
      return 0
    fi
  done

  echo "Error: Command not allowed"
  echo "Command: $command"
  echo ""
  echo "Allowed patterns: npm run, go run, python, make, docker-compose, etc."
  return 1
}

session_exists() {
  local session_name="$1"
  tmux has-session -t "$session_name" 2>/dev/null
}

handle_start() {
  local target_dir="$PWD"

  # Parse -d option for directory
  while [[ $# -gt 0 ]]; do
    case $1 in
      -d|--directory)
        target_dir="$2"
        shift 2
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ $# -lt 1 ]]; then
    echo "Error: start requires command"
    echo "Usage: tmux-dev-server-control start [-d <directory>] <command...>"
    return 1
  fi

  local command="$*"
  local session_name
  session_name=$(generate_session_name "$target_dir" "$command")

  validate_session_name "$session_name" || return 1
  validate_workspace "$target_dir" || return 1
  validate_git_repo "$target_dir" || return 1
  validate_command "$target_dir" "$command" || return 1

  if session_exists "$session_name"; then
    echo "Session '$session_name' already exists"
    echo "Stop it first with: tmux-dev-server-control stop $session_name"
    return 1
  fi

  echo "Starting session '$session_name' in $target_dir"
  echo "Command: $command"

  # Wrap the command to capture failures and keep session alive for debugging
  local wrapped_cmd="($command) || { exit_code=\$?; echo ''; echo \"Command failed with exit code: \$exit_code\"; echo 'Keeping session alive for debugging...'; sleep 30; }"
  tmux new-session -d -s "$session_name" -c "$target_dir" bash -c "$wrapped_cmd"

  # Wait a moment and check if session is still running
  sleep 2
  if session_exists "$session_name"; then
    # Check if we can see error output indicating failure
    local output
    output=$(tmux capture-pane -t "$session_name" -p)
    if [[ "$output" == *"Command failed with exit code"* ]]; then
      echo "✗ Command failed immediately. Output:"
      echo "----------------------------------------"
      echo "$output"
      tmux kill-session -t "$session_name"
      return 1
    else
      echo "✓ Session '$session_name' started successfully"
      echo "Monitor with: tmux-dev-server-control monitor $session_name"
      echo "Logs with: tmux-dev-server-control logs $session_name"
    fi
  else
    echo "✗ Session '$session_name' exited immediately"
    return 1
  fi
}

handle_stop() {
  if [[ $# -lt 1 ]]; then
    echo "Error: stop requires session name"
    echo "Usage: tmux-dev-server-control stop <session-name>"
    return 1
  fi

  local session_name="$1"
  validate_session_name "$session_name" || return 1

  if ! session_exists "$session_name"; then
    echo "Session '$session_name' does not exist"
    return 1
  fi

  echo "Stopping session '$session_name'..."
  tmux kill-session -t "$session_name"
  echo "✓ Session '$session_name' stopped"
}

handle_logs() {
  if [[ $# -lt 1 ]]; then
    echo "Error: logs requires session name"
    echo "Usage: tmux-dev-server-control logs <session-name> [lines]"
    return 1
  fi

  local session_name="$1"
  local lines="${2:-50}"

  validate_session_name "$session_name" || return 1

  if ! session_exists "$session_name"; then
    echo "Session '$session_name' does not exist"
    echo "Available sessions:"
    handle_list
    return 1
  fi

  echo "Last $lines lines from session '$session_name':"
  echo "----------------------------------------"
  tmux capture-pane -t "$session_name" -p | tail -n "$lines"
}

handle_status() {
  local session_name="${1:-}"

  if [[ -n "$session_name" ]]; then
    validate_session_name "$session_name" || return 1

    if session_exists "$session_name"; then
      echo "Session '$session_name': RUNNING"
      tmux display-message -t "$session_name" -p "Working directory: #{pane_current_path}"
      tmux display-message -t "$session_name" -p "Command: #{pane_current_command}"
    else
      echo "Session '$session_name': NOT FOUND"
    fi
  else
    echo "Development Server Sessions:"
    echo "============================"

    # Get all sessions and filter for dev server sessions
    if tmux list-sessions >/dev/null 2>&1; then
      tmux list-sessions -F "#{session_name}" | while read -r sess; do
        if [[ "$sess" =~ ^[a-zA-Z0-9_-]+-[a-zA-Z0-9_-]+$ ]]; then
          local status
          status=$(tmux display-message -t "$sess" -p "#{pane_current_path} | #{pane_current_command}")
          echo "$sess: $status"
        fi
      done
    else
      echo "No active sessions"
    fi
  fi
}

handle_monitor() {
  if [[ $# -lt 1 ]]; then
    echo "Error: monitor requires session name"
    echo "Usage: tmux-dev-server-control monitor <session-name>"
    return 1
  fi

  local session_name="$1"
  validate_session_name "$session_name" || return 1

  if ! session_exists "$session_name"; then
    echo "Session '$session_name' does not exist"
    return 1
  fi

  echo "Attaching to session '$session_name'..."
  echo "Use Ctrl+A then D to detach"
  tmux attach -t "$session_name"
}

handle_list() {
  echo "Development Server Sessions:"
  echo "============================"

  if tmux list-sessions >/dev/null 2>&1; then
    local found_workspace_sessions=false

    tmux list-sessions -F "#{session_name} #{session_created} #{session_attached}" | while read -r sess created attached; do
      if [[ "$sess" =~ ^[a-zA-Z0-9_-]+-[a-zA-Z0-9_-]+$ ]]; then
        found_workspace_sessions=true
        local status="detached"
        [[ "$attached" == "1" ]] && status="attached"
        echo "$sess [$status] (created: $(date -r "$created" '+%Y-%m-%d %H:%M'))"
      fi
    done

    if [[ "$found_workspace_sessions" == "false" ]]; then
      echo "No dev server sessions found"
      echo ""
      echo "Start a session with:"
      echo "  tmux-dev-server-control start 'command'"
    fi
  else
    echo "No active tmux sessions"
  fi
}

main "$@"
