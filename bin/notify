#!/usr/bin/env python3
"""Cross-OS notify hook for Codex/Claude.

Behavior:
- macOS (Darwin): plays a system sound via afplay
- Linux: no-op (exits 0)

Notes:
- Accepts and ignores any arguments (e.g., Codex JSON payload).
- Configurable via env vars:
  - NOTIFY_SOUND: path to sound file (default: /System/Library/Sounds/Glass.aiff)
  - NOTIFY_VOLUME: afplay volume 0.0â€“2.0 (default: 1.5)
"""

from __future__ import annotations

import os
import platform
import subprocess
import sys
from datetime import datetime


def _log_event(msg: str) -> None:
    """Append a debug line to ~/.codex/notify-hook.log (best-effort)."""
    try:
        log_path = os.path.expanduser(os.environ.get("NOTIFY_LOG_FILE", "~/.codex/notify-hook.log"))
        os.makedirs(os.path.dirname(log_path), exist_ok=True)
        ts = datetime.now().isoformat(timespec="seconds")
        with open(log_path, "a", encoding="utf-8") as f:
            f.write(f"[{ts}] {msg}\n")
    except Exception:
        # Never fail the hook due to logging issues
        pass


def macos_notify() -> None:
    sound_file = os.environ.get("NOTIFY_SOUND", "/System/Library/Sounds/Glass.aiff")
    volume = os.environ.get("NOTIFY_VOLUME", "1.5")
    try:
        subprocess.run(["/usr/bin/afplay", "-v", volume, sound_file], check=False,
                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=5)
    except Exception:
        # Keep hook non-fatal
        pass


def main(argv: list[str]) -> int:
    system = platform.system()
    _log_event(f"notify invoked (system={system}) argv={argv[1:]}")
    if system == "Darwin":
        macos_notify()
    # Linux and others: no-op
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv))
