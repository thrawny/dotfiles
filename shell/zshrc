# Exports
export ZSH_DISABLE_COMPFIX=true
export ZSH=$HOME/.oh-my-zsh
export PYTHONDONTWRITEBYTECODE=1
export GOPATH=$HOME/go
export EDITOR=nvim
export AWS_PAGER=''

ZSH_THEME="thrawny"

plugins=(
  git
  history
  history-substring-search
  docker
  python
  zsh-autosuggestions
)

PATH=$PATH:$GOPATH/bin:$HOME/dotfiles/bin
[[ ":$PATH:" != *":/usr/local/bin:"* ]] && PATH="/usr/local/bin:${PATH}"
[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && PATH="$HOME/.local/bin:${PATH}"
[[ ":$PATH:" != *":$HOME/.claude/local:"* ]] && PATH="$HOME/.claude/local:${PATH}"
[[ ":$PATH:" != *":$HOME/.cargo/bin:"* ]] && PATH="$HOME/.cargo/bin:${PATH}"

export PATH

HAS_WORKBREW=$([[ -d /opt/workbrew ]] && echo 1 || echo 0)

# OSX specific stuff
if [[ "$(uname)" == "Darwin" ]]; then
  export LANG="C"
  plugins+=(macos)
  if [[ "$HAS_WORKBREW" == "0" ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi
  export ASDF_DIR=/opt/homebrew/opt/asdf/libexec
else
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
fi;

if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH

  if [[ "$HAS_WORKBREW" == "0" ]]; then
    autoload -Uz compinit
    compinit
  fi
fi

source $ZSH/oh-my-zsh.sh

bindkey ^F forward-word
bindkey ^f forward-word

unalias -m "gpo"
unalias -m "gp"
unalias -m "gcam"
unalias -m "gcm"

# Aliases
alias pi="pip install -r requirements.txt"
alias pc="pip-compile"
alias fig="docker-compose"
alias vim=nvim
alias svh="sudo nvim /etc/hosts"
alias vbm="VBoxManage"
alias pycheck='isort && flake8 && pytest'
alias pyupdatecheck='pip-compile --upgrade --dry-run | diff -i requirements.txt -'
alias vpn='sudo openvpn'
alias k='kubectl'
alias kt='stern'
alias ka='kubectl apply -f'
alias kn='kubectl -n kube-system'
alias ki='kubectl -n istio-system'
alias kp='kubectl get pods'
alias gsha='git rev-parse HEAD | cut -c1-9'
alias klf='kubectl logs -f'
alias kl='kubectl logs'
alias ku='kubectl config use-context'
alias hb='gh repo view --web'
alias gotest='golangci-lint fmt && golangci-lint run --fix && go test $(go list ./... | grep -v /lab/)'
alias b='bat -p --pager=never'
alias kubectl-extract-context='kc config view --minify=true --flatten --context'
alias kec='kubectl-extract-context'
alias vkp='watch -n 1 kubectl get pods'
alias kvp='watch -n 1 kubectl get pods'
alias v='watch -n 1'
alias kd='kc drain --ignore-daemonsets --delete-local-data --force'
alias gcam="git add -A && git commit -m"
alias tfa='terraform apply'
alias bu='brew upgrade'
alias mp='microplane'
alias gcr='git-cleanup-repo'
alias pr='gh pr create --web'
alias kdp='kubectl describe pod'
alias striplines='tr -d "\n"'
alias knp='kubectl -n kube-system get pod'
alias kd='kubectl delete'
alias gcm='git commit -m'
alias kdf='kubectl delete -f'
alias gp='git push --force-with-lease --force-if-includes'
alias tp='terraform plan'
alias ta='terraform apply'
alias taf='terraform apply -auto-approve'
alias kz='kubectl kustomize'
if bat --version &>/dev/null; then
  alias cat='bat --style=header,grid,snip --theme "Monokai Extended Origin"'
fi

# Functions
function gtrm() {
  git tag --delete $1 && git push --delete origin $1
}

function gpo() {
  git push -u origin $(git_current_branch)
}

function kcaev() {
  envsubst < $1 | kubectl apply -f -
}

function ktc() {
  stern $1 -c $1 -e "kube-probe|Checking status...|health check|Accepted connection from /100" ${@:2}
}

function kcpf() {
  while true; do
    kubectl port-forward "$@"
  done
}

function asudo() {
  export $(awsudo default)
}

function dbp() {
  docker build -t $1 . && docker push $1
}

function ktjq() {
  stern $1 --output raw | jq -r -R 'fromjson? | "\(.["@timestamp"]) [\(.level)] - \(.message)"' ${@:2}
}

function uuid() {
  python3 -c "import uuid;print(uuid.uuid4())"
}

# warp ai blocks
c() {
    echo "# $*"
}

function al() {
  profile=${AWS_PROFILE:-default}
  aws sso login --profile $profile
}

function ccv() {
  local env_vars=(
    "ENABLE_BACKGROUND_TASKS=true"
    "FORCE_AUTO_BACKGROUND_TASKS=true"
    "CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC=true"
    "CLAUDE_CODE_ENABLE_UNIFIED_READ_TOOL=true"
  )

  local claude_args=()

  if [[ "$1" == "-y" ]]; then
    claude_args+=("--dangerously-skip-permissions")
  elif [[ "$1" == "-r" ]]; then
    claude_args+=("--resume")
  elif [[ "$1" == "-c" ]]; then
    claude_args+=("--continue")
  elif [[ "$1" == "-ry" ]] || [[ "$1" == "-yr" ]]; then
    claude_args+=("--resume" "--dangerously-skip-permissions")
  elif [[ "$1" == "-yc" ]] || [[ "$1" == "-cy" ]]; then
    claude_args+=("--continue" "--dangerously-skip-permissions")
  fi

  env "${env_vars[@]}" claude "${claude_args[@]}"
}


function ecr_login() {
  ACCOUNT_ID=$(aws --profile $1 sts get-caller-identity --query Account --output text)
  REGION=$(aws --profile $1 configure get region)
  ECR_URL="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"
  echo "Logging into ecr for profile $1 with ECR URL $ECR_URL"
  aws --profile $1 ecr get-login-password | docker login --username AWS --password-stdin $ECR_URL
}

function wtfpipeoutput () {
  cat <<EOF
command &> out          # for both going to out, works in bash and zsh
command >out 2>&1       # for both going to out
command > out 2>error   # std out to out, stderr to error
EOF
}

[ -f /opt/homebrew/opt/asdf/libexec/asdf.sh ] && . /opt/homebrew/opt/asdf/libexec/asdf.sh
[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh

[ -f ~/.zsh.local ] && source ~/.zsh.local

if direnv version &>/dev/null; then
  eval "$(direnv hook zsh)"
fi
